Module(body=[
  AnnAssign(
    annotation=[Name(id='str')],
    value=Constant(value='tru'),
    simple=1),
  AugAssign(
    target=[Name(id='node')],
    op=Add(),
    value=Constant(value='e')),
  Call(
    func=Name(id='print'),
    args=[],
    keywords=[
      keyword(
        arg='sep',
        value=Constant(value=', ')),
      keyword(
        arg='end',
        value=Constant(value='\\n\\t'))]),
  Assign(
    targets=[Name(id='constants')],
    value=Dict(
      keys=[
        Constant(value='true'),
        Constant(value=True),
        Constant(value='false'),
        Constant(value=False),
        Constant(value='null'),
        Constant(value=None),
        Constant(value='noop')],
      values=[
        Constant(value=True),
        Constant(value='false'),
        Constant(value=False),
        Constant(value='null'),
        Constant(value=None),
        Constant(value='noop'),
        Constant(value=None)])),
  For(
    target=[
      Name(id='k'),
      Name(id='v')],
    iter=Call(
      func=Attribute(
        value=Name(
          id='items',
          ctx=Load()),
        attr=Name(
          id='constants',
          ctx=Load())),
      args=[],
      keywords=[]),
    body=[
      IfExp(
        test=Compare(
          left=Name(
            id='node',
            ctx=Load()),
          ops=[Eq()],
          comparators=[Name(
            id='k',
            ctx=Load())]),
        body=[
          Call(
            func=Name(id='print'),
            args=[],
            keywords=[]),
          Tree('break_stmt', [])],
        orelse=None),
      Call(
        func=Name(id='print'),
        args=[],
        keywords=[])])])