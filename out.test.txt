Module(body=[
  ImportFrom(
    module='ast',
    names=[alias(
      name='parse',
      asname=None)],
    level=0),
  ImportFrom(
    module='os',
    names=[alias(
      name='makedirs',
      asname='mkdir')],
    level=0),
  ImportFrom(
    module='os.path',
    names=[
      alias(
        name='dirname',
        asname=None),
      alias(
        name='exists',
        asname=None),
      alias(
        name='join',
        asname=None)],
    level=0),
  ImportFrom(
    module='sys',
    names=[alias(
      name='argv',
      asname=None)],
    level=0),
  ImportFrom(
    module='astunparse',
    names=[alias(
      name='dump',
      asname=None)],
    level=0),
  ImportFrom(
    module='postprocessor',
    names=[alias(
      name='*',
      asname=None)],
    level=0),
  ImportFrom(
    module='utils',
    names=[
      alias(
        name='log',
        asname=None),
      alias(
        name='setup',
        asname=None)],
    level=0),
  ImportFrom(
    module='utils.options',
    names=[alias(
      name='Options',
      asname=None)],
    level=0),
  ImportFrom(
    module='utils.unparser',
    names=[alias(
      name='Unparser',
      asname=None)],
    level=0),
  ImportFrom(
    module='transpiler',
    names=[alias(
      name='Transpiler',
      asname=None)],
    level=0),
  FunctionDef(
    name='main',
    args=[],
    body=[
      Assign(
        targets=[Name(
          id='fpath',
          ctx=Store())],
        value=Subscript(
          value=Name(
            id='argv',
            ctx=Load()),
          slice=Index(value=Constant(
            value=1,
            kind=<class 'int'>)),
          ctx=Load())),
      With(
        items=[withitem(
          context_expr=Call(
            func=Name(id='open'),
            args=[
              Name(id='fpath'),
              Constant(
                value='r',
                kind=<class 'str'>)],
            keywords=[]),
          optional_vars=[Name(id='f')])],
        body=[Assign(
          targets=[Name(
            id='data',
            ctx=Store())],
          value=Call(
            func=Attribute(
              value=Name(
                id='f',
                ctx=Load()),
              attr=Name(
                id='read',
                ctx=Load())),
            args=[],
            keywords=[]))]),
      Assign(
        targets=[Name(
          id='auto_process_libs',
          ctx=Store())],
        value=Tree('list', [Tree('testlist_comp', [Constant(
  value='math',
  kind=<class 'str'>), Constant(
  value='os.path',
  kind=<class 'str'>)])])),
      Assign(
        targets=[Name(
          id='auto_import_libs',
          ctx=Store())],
        value=Tree('list', [Tree('testlist_comp', [Tree('star_expr', [[Name(id='auto_process_libs')]]), Constant(
  value='os',
  kind=<class 'str'>)])])),
      Assign(
        targets=[Name(
          id='options',
          ctx=Store())],
        value=Call(
          func=Name(id='Options'),
          args=[],
          keywords=[
            keyword(
              arg='debug',
              value=Constant(
                value=True,
                kind=<class 'bool'>)),
            keyword(
              arg='imports',
              value=[Name(id='auto_import_libs')]),
            keyword(
              arg='eval_mod',
              value=[Name(id='auto_process_libs')])])),
      Assign(
        targets=[Name(
          id='data',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Call(
              func=Name(id='Transpiler'),
              args=[],
              keywords=[keyword(
                arg='options',
                value=[Name(id='options')])]),
            attr=Name(
              id='transpile',
              ctx=Load())),
          args=[Name(id='data')],
          keywords=[])),
      Assign(
        targets=[Name(
          id='tree',
          ctx=Store())],
        value=Call(
          func=Name(id='parse'),
          args=[Name(id='data')],
          keywords=[])),
      Assign(
        targets=[Name(
          id='tree',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Call(
              func=Name(id='Generator'),
              args=[],
              keywords=[keyword(
                arg='options',
                value=[Name(id='options')])]),
            attr=Name(
              id='generate',
              ctx=Load())),
          args=[Name(id='tree')],
          keywords=[])),
      Assign(
        targets=[Name(
          id='tree',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Call(
              func=Name(id='Optimizer'),
              args=[],
              keywords=[keyword(
                arg='options',
                value=[Name(id='options')])]),
            attr=Name(
              id='optimize',
              ctx=Load())),
          args=[Name(id='tree')],
          keywords=[])),
      Assign(
        targets=[Name(
          id='tree',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Call(
              func=Name(id='Inliner'),
              args=[],
              keywords=[keyword(
                arg='options',
                value=[Name(id='options')])]),
            attr=Name(
              id='inline',
              ctx=Load())),
          args=[Name(id='tree')],
          keywords=[])),
      Assign(
        targets=[Name(
          id='tree',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Call(
              func=Name(id='Importer'),
              args=[],
              keywords=[keyword(
                arg='options',
                value=[Name(id='options')])]),
            attr=Name(
              id='clean_imports',
              ctx=Load())),
          args=[Name(id='tree')],
          keywords=[])),
      Assign(
        targets=[Name(
          id='tree',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Call(
              func=Name(id='UnusedRemover'),
              args=[],
              keywords=[keyword(
                arg='options',
                value=[Name(id='options')])]),
            attr=Name(
              id='remove_unused',
              ctx=Load())),
          args=[Name(id='tree')],
          keywords=[])),
      Assign(
        targets=[Name(
          id='code',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Name(
              id='Unparser',
              ctx=Load()),
            attr=Name(
              id='unparse',
              ctx=Load())),
          args=[Name(id='tree')],
          keywords=[])),
      Assign(
        targets=[Name(
          id='code',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Call(
              func=Name(id='Minifier'),
              args=[],
              keywords=[keyword(
                arg='options',
                value=[Name(id='options')])]),
            attr=Name(
              id='minify',
              ctx=Load())),
          args=[Name(id='code')],
          keywords=[])),
      Assign(
        targets=[Name(
          id='path_parts',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Name(
              id='fpath',
              ctx=Load()),
            attr=Name(
              id='split',
              ctx=Load())),
          args=[Constant(
            value='.',
            kind=<class 'str'>)],
          keywords=[])),
      Assign(
        targets=[Name(
          id='out_path',
          ctx=Store())],
        value=Call(
          func=Name(id='join'),
          args=[
            Constant(
              value='dist',
              kind=<class 'str'>),
            BinOp(
              left=Call(
                func=Attribute(
                  value=Constant(
                    value='',
                    kind=<class 'str'>),
                  attr=Name(
                    id='join',
                    ctx=Load())),
                args=[Subscript(
                  value=Name(
                    id='path_parts',
                    ctx=Load()),
                  slice=Index(value=UnaryOp(
                    op=USub(),
                    operand=Constant(
                      value=1,
                      kind=<class 'int'>))),
                  ctx=Load())],
                keywords=[]),
              op=Add(),
              right=Constant(
                value='.py',
                kind=<class 'str'>))],
          keywords=[])),
      Assign(
        targets=[Name(
          id='out_dir',
          ctx=Store())],
        value=Call(
          func=Name(id='dirname'),
          args=[Name(id='out_path')],
          keywords=[])),
      If(
        test=UnaryOp(
          op=Not(),
          operand=Call(
            func=Name(id='exists'),
            args=[Name(id='out_dir')],
            keywords=[])),
        body=[Call(
          func=Name(id='mkdir'),
          args=[Name(id='out_dir')],
          keywords=[])],
        orelse=None),
      With(
        items=[withitem(
          context_expr=Call(
            func=Name(id='open'),
            args=[
              Name(id='out_path'),
              Constant(
                value='w',
                kind=<class 'str'>)],
            keywords=[]),
          optional_vars=[Name(id='f')])],
        body=[Call(
          func=Attribute(
            value=Name(
              id='f',
              ctx=Load()),
            attr=Name(
              id='write',
              ctx=Load())),
          args=[Name(id='code')],
          keywords=[])])],
    decorator_list=[])])