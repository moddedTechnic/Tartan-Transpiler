Module(body=[
  ImportFrom(
    module='ast',
    names=[alias(
      name='parse',
      asname=None)]),
  ImportFrom(
    module='os',
    names=[alias(
      name='makedirs',
      asname='mkdir')]),
  ImportFrom(
    module='os.path',
    names=[
      alias(
        name='dirname',
        asname=None),
      alias(
        name='exists',
        asname=None),
      alias(
        name='join',
        asname=None)]),
  ImportFrom(
    module='sys',
    names=[alias(
      name='argv',
      asname=None)]),
  ImportFrom(
    module='astunparse',
    names=[alias(
      name='dump',
      asname=None)]),
  ImportFrom(
    module='postprocessor',
    names=None),
  ImportFrom(
    module='utils',
    names=[
      alias(
        name='log',
        asname=None),
      alias(
        name='setup',
        asname=None)]),
  ImportFrom(
    module='utils.options',
    names=[alias(
      name='Options',
      asname=None)]),
  ImportFrom(
    module='utils.unparser',
    names=[alias(
      name='Unparser',
      asname=None)]),
  ImportFrom(
    module='transpiler',
    names=[alias(
      name='Transpiler',
      asname=None)]),
  FunctionDef(
    name='main',
    args=[],
    body=[
      Assign(
        targets=[Name(
          id='fpath',
          ctx=Store())],
        value=Subscript(
          value=Name(id='argv'),
          slice=Index(value=Constant(value=1)))),
      With(
        items=[withitem(
          context_expr=Call(
            func=Name(id='open'),
            args=[
              [Name(id='fpath')],
              Constant(value='r')],
            keywords=[]),
          optional_vars=[Name(id='f')])],
        body=[Assign(
          targets=[Name(
            id='data',
            ctx=Store())],
          value=Call(
            func=Attribute(
              value=Name(
                id='f',
                ctx=Load()),
              attr=Name(
                id='read',
                ctx=Load())),
            args=[],
            keywords=[]))]),
      Assign(
        targets=[Name(
          id='path_parts',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Name(
              id='fpath',
              ctx=Load()),
            attr=Name(
              id='split',
              ctx=Load())),
          args=[Constant(value='.')],
          keywords=[])),
      Assign(
        targets=[Name(
          id='out_path',
          ctx=Store())],
        value=Call(
          func=Name(id='join'),
          args=[
            Constant(value='dist'),
            BinOp(
              left=Call(
                func=Attribute(
                  value=Constant(value=''),
                  attr=Name(
                    id='join',
                    ctx=Load())),
                args=[Subscript(
                  value=Name(id='path_parts'),
                  slice=Index(value=UnaryOp(
                    op=USub(),
                    operand=Constant(value=1))))],
                keywords=[]),
              op=Add(),
              right=Constant(value='.py'))],
          keywords=[])),
      Assign(
        targets=[Name(
          id='out_dir',
          ctx=Store())],
        value=Call(
          func=Name(id='dirname'),
          args=[[Name(id='out_path')]],
          keywords=[])),
      IfExp(
        test=UnaryOp(
          op=Not(),
          operand=Call(
            func=Name(id='exists'),
            args=[[Name(id='out_dir')]],
            keywords=[])),
        body=[Call(
          func=Name(id='mkdir'),
          args=[[Name(id='out_dir')]],
          keywords=[])],
        orelse=None),
      With(
        items=[withitem(
          context_expr=Call(
            func=Name(id='open'),
            args=[
              [Name(id='out_path')],
              Constant(value='w')],
            keywords=[]),
          optional_vars=[Name(id='f')])],
        body=[Call(
          func=Attribute(
            value=Name(
              id='f',
              ctx=Load()),
            attr=Name(
              id='write',
              ctx=Load())),
          args=[[Name(id='code')]],
          keywords=[])])],
    decorator_list=[])])