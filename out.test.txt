Module(body=[
  Tree('import_stmt', [Tree('import_from', [Tree('dotted_name', [Name(id='ast')]), Tree('import_as_names', [Tree('import_as_name', [Name(id='parse')])])])]),
  Tree('import_stmt', [Tree('import_from', [Tree('dotted_name', [Name(id='os')]), Tree('import_as_names', [Tree('import_as_name', [Name(id='makedirs'), Name(id='mkdir')])])])]),
  Tree('import_stmt', [Tree('import_from', [Tree('dotted_name', [Name(id='os'), Name(id='path')]), Tree('import_as_names', [Tree('import_as_name', [Name(id='dirname')]), Tree('import_as_name', [Name(id='exists')]), Tree('import_as_name', [Name(id='join')])])])]),
  Tree('import_stmt', [Tree('import_from', [Tree('dotted_name', [Name(id='sys')]), Tree('import_as_names', [Tree('import_as_name', [Name(id='argv')])])])]),
  Tree('import_stmt', [Tree('import_from', [Tree('dotted_name', [Name(id='astunparse')]), Tree('import_as_names', [Tree('import_as_name', [Name(id='dump')])])])]),
  Tree('import_stmt', [Tree('import_from', [Tree('dotted_name', [Name(id='postprocessor')])])]),
  Tree('import_stmt', [Tree('import_from', [Tree('dotted_name', [Name(id='utils')]), Tree('import_as_names', [Tree('import_as_name', [Name(id='log')]), Tree('import_as_name', [Name(id='setup')])])])]),
  Tree('import_stmt', [Tree('import_from', [Tree('dotted_name', [Name(id='utils'), Name(id='options')]), Tree('import_as_names', [Tree('import_as_name', [Name(id='Options')])])])]),
  Tree('import_stmt', [Tree('import_from', [Tree('dotted_name', [Name(id='utils'), Name(id='unparser')]), Tree('import_as_names', [Tree('import_as_name', [Name(id='Unparser')])])])]),
  Tree('import_stmt', [Tree('import_from', [Tree('dotted_name', [Name(id='transpiler')]), Tree('import_as_names', [Tree('import_as_name', [Name(id='Transpiler')])])])]),
  FunctionDef(
    name='main',
    args=[],
    body=[
      Assign(
        targets=[Name(
          id='fpath',
          ctx=Store())],
        value=Tree('getitem', [[Name(id='argv')], Tree('subscriptlist', [Tree('subscript', [Constant(value=1)])])])),
      With(
        items=[withitem(
          context_expr=Call(
            func=Name(id='open'),
            args=[
              [Name(id='fpath')],
              Constant(value='r')],
            keywords=[]),
          optional_vars=[Name(id='f')])],
        body=[Assign(
          targets=[Name(
            id='data',
            ctx=Store())],
          value=Call(
            func=Attribute(
              value=Name(
                id='f',
                ctx=Load()),
              attr=Name(
                id='read',
                ctx=Load())),
            args=[],
            keywords=[]))]),
      Assign(
        targets=[Name(
          id='path_parts',
          ctx=Store())],
        value=Call(
          func=Attribute(
            value=Name(
              id='fpath',
              ctx=Load()),
            attr=Name(
              id='split',
              ctx=Load())),
          args=[Constant(value='.')],
          keywords=[])),
      Assign(
        targets=[Name(
          id='out_path',
          ctx=Store())],
        value=Call(
          func=Name(id='join'),
          args=[
            Constant(value='dist'),
            BinOp(
              left=Call(
                func=Attribute(
                  value=Constant(value=''),
                  attr=Name(
                    id='join',
                    ctx=Load())),
                args=[],
                keywords=[]),
              op=Add(),
              right=Constant(value='.py'))],
          keywords=[])),
      Assign(
        targets=[Name(
          id='out_dir',
          ctx=Store())],
        value=Call(
          func=Name(id='dirname'),
          args=[[Name(id='out_path')]],
          keywords=[])),
      IfExp(
        test=UnaryOp(
          op=Not(),
          operand=Call(
            func=Name(id='exists'),
            args=[[Name(id='out_dir')]],
            keywords=[])),
        body=[Call(
          func=Name(id='mkdir'),
          args=[[Name(id='out_dir')]],
          keywords=[])],
        orelse=None),
      With(
        items=[withitem(
          context_expr=Call(
            func=Name(id='open'),
            args=[
              [Name(id='out_path')],
              Constant(value='w')],
            keywords=[]),
          optional_vars=[Name(id='f')])],
        body=[Call(
          func=Attribute(
            value=Name(
              id='f',
              ctx=Load()),
            attr=Name(
              id='write',
              ctx=Load())),
          args=[[Name(id='code')]],
          keywords=[])])],
    decorator_list=[])])