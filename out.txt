

Module(
  body=[
    ImportFrom(
      module='ast',
      names=[alias(
        name='parse',
        asname=None)],
      level=0),
    ImportFrom(
      module='os.path',
      names=[
        alias(
          name='join',
          asname=None),
        alias(
          name='dirname',
          asname=None),
        alias(
          name='exists',
          asname=None)],
      level=0),
    ImportFrom(
      module='os',
      names=[alias(
        name='makedirs',
        asname='mkdir')],
      level=0),
    ImportFrom(
      module='astunparse',
      names=[alias(
        name='dump',
        asname=None)],
      level=0),
    ImportFrom(
      module='options',
      names=[alias(
        name='Options',
        asname=None)],
      level=0),
    ImportFrom(
      module='generator',
      names=[alias(
        name='Generator',
        asname=None)],
      level=0),
    ImportFrom(
      module='optimizer',
      names=[alias(
        name='Optimizer',
        asname=None)],
      level=0),
    ImportFrom(
      module='auto_import',
      names=[alias(
        name='Importer',
        asname=None)],
      level=0),
    ImportFrom(
      module='remove_unused',
      names=[alias(
        name='UnusedRemover',
        asname=None)],
      level=0),
    ImportFrom(
      module='unparser',
      names=[alias(
        name='Unparser',
        asname=None)],
      level=0),
    ImportFrom(
      module='minifier',
      names=[alias(
        name='Minifier',
        asname=None)],
      level=0),
    ImportFrom(
      module='utils',
      names=[
        alias(
          name='log',
          asname=None),
        alias(
          name='setup',
          asname=None)],
      level=0),
    FunctionDef(
      name='main',
      args=arguments(
        posonlyargs=[],
        args=[],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[]),
      body=[
        Assign(
          targets=[Name(
            id='fpath',
            ctx=Store())],
          value=Constant(
            value='test\\__main__.tart',
            kind=None),
          type_comment=None),
        With(
          items=[withitem(
            context_expr=Call(
              func=Name(
                id='open',
                ctx=Load()),
              args=[
                Name(
                  id='fpath',
                  ctx=Load()),
                Constant(
                  value='r',
                  kind=None)],
              keywords=[]),
            optional_vars=Name(
              id='f',
              ctx=Store()))],
          body=[Assign(
            targets=[Name(
              id='data',
              ctx=Store())],
            value=Call(
              func=Attribute(
                value=Name(
                  id='f',
                  ctx=Load()),
                attr='read',
                ctx=Load()),
              args=[],
              keywords=[]),
            type_comment=None)],
          type_comment=None),
        Assign(
          targets=[Name(
            id='auto_process_libs',
            ctx=Store())],
          value=List(
            elts=[
              Constant(
                value='math',
                kind=None),
              Constant(
                value='os.path',
                kind=None)],
            ctx=Load()),
          type_comment=None),
        Assign(
          targets=[Name(
            id='auto_import_libs',
            ctx=Store())],
          value=List(
            elts=[
              Starred(
                value=Name(
                  id='auto_process_libs',
                  ctx=Load()),
                ctx=Load()),
              Constant(
                value='os',
                kind=None)],
            ctx=Load()),
          type_comment=None),
        Assign(
          targets=[Name(
            id='options',
            ctx=Store())],
          value=Call(
            func=Name(
              id='Options',
              ctx=Load()),
            args=[],
            keywords=[
              keyword(
                arg='debug',
                value=Constant(
                  value=True,
                  kind=None)),
              keyword(
                arg='imports',
                value=Name(
                  id='auto_import_libs',
                  ctx=Load())),
              keyword(
                arg='eval_mod',
                value=Name(
                  id='auto_process_libs',
                  ctx=Load()))]),
          type_comment=None),
        Assign(
          targets=[Name(
            id='tree',
            ctx=Store())],
          value=Call(
            func=Name(
              id='parse',
              ctx=Load()),
            args=[Name(
              id='data',
              ctx=Load())],
            keywords=[]),
          type_comment=None),
        Assign(
          targets=[Name(
            id='tree',
            ctx=Store())],
          value=Call(
            func=Attribute(
              value=Call(
                func=Name(
                  id='Generator',
                  ctx=Load()),
                args=[],
                keywords=[keyword(
                  arg='options',
                  value=Name(
                    id='options',
                    ctx=Load()))]),
              attr='generate',
              ctx=Load()),
            args=[Name(
              id='tree',
              ctx=Load())],
            keywords=[]),
          type_comment=None),
        Assign(
          targets=[Name(
            id='tree',
            ctx=Store())],
          value=Call(
            func=Attribute(
              value=Call(
                func=Name(
                  id='Optimizer',
                  ctx=Load()),
                args=[],
                keywords=[keyword(
                  arg='options',
                  value=Name(
                    id='options',
                    ctx=Load()))]),
              attr='optimize',
              ctx=Load()),
            args=[Name(
              id='tree',
              ctx=Load())],
            keywords=[]),
          type_comment=None),
        Assign(
          targets=[Name(
            id='tree',
            ctx=Store())],
          value=Call(
            func=Attribute(
              value=Call(
                func=Name(
                  id='Importer',
                  ctx=Load()),
                args=[],
                keywords=[keyword(
                  arg='options',
                  value=Name(
                    id='options',
                    ctx=Load()))]),
              attr='clean_imports',
              ctx=Load()),
            args=[Name(
              id='tree',
              ctx=Load())],
            keywords=[]),
          type_comment=None),
        Assign(
          targets=[Name(
            id='tree',
            ctx=Store())],
          value=Call(
            func=Attribute(
              value=Call(
                func=Name(
                  id='UnusedRemover',
                  ctx=Load()),
                args=[],
                keywords=[keyword(
                  arg='options',
                  value=Name(
                    id='options',
                    ctx=Load()))]),
              attr='remove_unused',
              ctx=Load()),
            args=[Name(
              id='tree',
              ctx=Load())],
            keywords=[]),
          type_comment=None),
        Assign(
          targets=[Name(
            id='code',
            ctx=Store())],
          value=Call(
            func=Attribute(
              value=Name(
                id='Unparser',
                ctx=Load()),
              attr='unparse',
              ctx=Load()),
            args=[Name(
              id='tree',
              ctx=Load())],
            keywords=[]),
          type_comment=None),
        Assign(
          targets=[Name(
            id='code',
            ctx=Store())],
          value=Call(
            func=Attribute(
              value=Call(
                func=Name(
                  id='Minifier',
                  ctx=Load()),
                args=[],
                keywords=[keyword(
                  arg='options',
                  value=Name(
                    id='options',
                    ctx=Load()))]),
              attr='minify',
              ctx=Load()),
            args=[Name(
              id='code',
              ctx=Load())],
            keywords=[]),
          type_comment=None),
        Expr(value=Call(
          func=Name(
            id='log',
            ctx=Load()),
          args=[Call(
            func=Name(
              id='dump',
              ctx=Load()),
            args=[Name(
              id='tree',
              ctx=Load())],
            keywords=[])],
          keywords=[])),
        Expr(value=Call(
          func=Name(
            id='log',
            ctx=Load()),
          args=[Call(
            func=Attribute(
              value=Name(
                id='code',
                ctx=Load()),
              attr='replace',
              ctx=Load()),
            args=[
              Constant(
                value='\n',
                kind=None),
              Constant(
                value='\\n\n',
                kind=None)],
            keywords=[])],
          keywords=[])),
        Assign(
          targets=[Name(
            id='path_parts',
            ctx=Store())],
          value=Call(
            func=Attribute(
              value=Name(
                id='fpath',
                ctx=Load()),
              attr='split',
              ctx=Load()),
            args=[Constant(
              value='.',
              kind=None)],
            keywords=[]),
          type_comment=None),
        Assign(
          targets=[Name(
            id='out_path',
            ctx=Store())],
          value=Call(
            func=Name(
              id='join',
              ctx=Load()),
            args=[
              Constant(
                value='dist',
                kind=None),
              BinOp(
                left=Call(
                  func=Attribute(
                    value=Constant(
                      value='',
                      kind=None),
                    attr='join',
                    ctx=Load()),
                  args=[Starred(
                    value=Subscript(
                      value=Name(
                        id='path_parts',
                        ctx=Load()),
                      slice=Slice(
                        lower=None,
                        upper=UnaryOp(
                          op=USub(),
                          operand=Constant(
                            value=1,
                            kind=None)),
                        step=None),
                      ctx=Load()),
                    ctx=Load())],
                  keywords=[]),
                op=Add(),
                right=Constant(
                  value='.py',
                  kind=None))],
            keywords=[]),
          type_comment=None),
        Assign(
          targets=[Name(
            id='out_dir',
            ctx=Store())],
          value=Call(
            func=Name(
              id='dirname',
              ctx=Load()),
            args=[Name(
              id='out_path',
              ctx=Load())],
            keywords=[]),
          type_comment=None),
        If(
          test=UnaryOp(
            op=Not(),
            operand=Call(
              func=Name(
                id='exists',
                ctx=Load()),
              args=[Name(
                id='out_dir',
                ctx=Load())],
              keywords=[])),
          body=[Expr(value=Call(
            func=Name(
              id='mkdir',
              ctx=Load()),
            args=[Name(
              id='out_dir',
              ctx=Load())],
            keywords=[]))],
          orelse=[]),
        With(
          items=[withitem(
            context_expr=Call(
              func=Name(
                id='open',
                ctx=Load()),
              args=[
                Name(
                  id='out_path',
                  ctx=Load()),
                Constant(
                  value='w',
                  kind=None)],
              keywords=[]),
            optional_vars=Name(
              id='f',
              ctx=Store()))],
          body=[Expr(value=Call(
            func=Attribute(
              value=Name(
                id='f',
                ctx=Load()),
              attr='write',
              ctx=Load()),
            args=[Name(
              id='code',
              ctx=Load())],
            keywords=[]))],
          type_comment=None)],
      decorator_list=[],
      returns=None,
      type_comment=None),
    If(
      test=Compare(
        left=Name(
          id='__name__',
          ctx=Load()),
        ops=[Eq()],
        comparators=[Constant(
          value='__main__',
          kind=None)]),
      body=[
        Expr(value=Call(
          func=Name(
            id='setup',
            ctx=Load()),
          args=[],
          keywords=[])),
        Expr(value=Call(
          func=Name(
            id='main',
            ctx=Load()),
          args=[],
          keywords=[]))],
      orelse=[])],
  type_ignores=[])

from ast import parse\n
from os.path import join,dirname,exists\n
from os import makedirs as mkdir\n
from astunparse import dump\n
from options import Options\n
from generator import Generator\n
from optimizer import Optimizer\n
from auto_import import Importer\n
from remove_unused import UnusedRemover\n
from unparser import Unparser\n
from minifier import Minifier\n
from utils import log,setup\n
def main():\n
	fpath='test\\__main__.tart'\n
	with open(fpath,'r') as f:\n
		data=f.read()\n
	auto_process_libs=['math','os.path']\n
	auto_import_libs=[*auto_process_libs,'os']\n
	options=Options(debug=True,imports=auto_import_libs,eval_mod=auto_process_libs)\n
	tree=parse(data)\n
	tree=Generator(options=options).generate(tree)\n
	tree=Optimizer(options=options).optimize(tree)\n
	tree=Importer(options=options).clean_imports(tree)\n
	tree=UnusedRemover(options=options).remove_unused(tree)\n
	code=Unparser.unparse(tree)\n
	code=Minifier(options=options).minify(code)\n
	log(dump(tree))\n
	log(code.replace('\n','\\n\n'))\n
	path_parts=fpath.split('.')\n
	out_path=join('dist',(''.join(*path_parts[:(-1)])+'.py'))\n
	out_dir=dirname(out_path)\n
	if (not exists(out_dir)):\n
		mkdir(out_dir)\n
	with open(out_path,'w') as f:\n
		f.write(code)\n
if (__name__=='__main__'):\n
	setup()\n
	main()